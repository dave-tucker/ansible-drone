#!/usr/bin/env python
#

# (c) 2014, Pavel Antonov <antonov@adwz.ru>
#
# This file is part of Ansible
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software.  If not, see <http://www.gnu.org/licenses/>.

######################################################################

DOCUMENTATION = '''
---
module: docker_pull
author: Matt Martz
version_added: 0.0
short_description: Handle Docker Pull
description:
     - Download and remove docker images
options:
  name:
    description:
       - Image name to work with
    required: true
    default: null
  tag:
    description:
       - Image tag to work with
    required: false
  docker_url:
    description:
      - URL of docker host to issue commands to
    required: false
    default: unix://var/run/docker.sock
  state:
    description:
      - Set the state of the image
    required: false
    default: present
    choices:
      - present
      - absent
  timeout:
    description:
      - Set image operation timeout
    required: false
    default: 600
    aliases: []
requirements:
    - docker-py
'''

EXAMPLES = '''
- hosts: web
  sudo: yes
  tasks:
  - name: Download ubuntu image
    docker_pull: name="ubuntu" state=present

- hosts: web
  sudo: yes
  tasks:
  - name: Remove ubunt image
    docker_pull: name="ubuntu" state=absent
'''

import requests.exceptions

from urlparse import urlparse

try:
    import docker.client
    HAS_DOCKERPY = True
except ImportError:
    HAS_DOCKERPY = False


class DockerPull:

    def __init__(self, module):
        self.module = module
        self.params = params = module.params
        self.name = params.get('name')
        self.tag = params.get('tag')
        docker_url = urlparse(params.get('docker_url'))
        self.client = docker.client.Client(base_url=docker_url.geturl(),
                                           timeout=params.get('timeout'))
        self.changed = False

    def pull(self):
        stream = self.client.pull(repository=self.name, tag=self.tag,
                                  stream=True)
        for res in stream:
            pass
        res = json.loads(res)
        self.changed = True
        return res['id'], res['status']

    def has_changed(self):
        return self.changed

    def get_images(self):
        filtered_images = []
        images = self.client.images(name=self.name)
        match = '%s:%s' % (self.name, self.tag)
        for i in images:
            if match in i['RepoTags']:
                filtered_images.append(i)
        return filtered_images

    def remove_images(self):
        images = self.get_images()
        for i in images:
            try:
                self.client.remove_image(i['Id'])
                self.changed = True
            except docker.APIError:
                # image can be removed by docker if not used
                pass


def main():
    module = AnsibleModule(
        argument_spec=dict(
            name=dict(required=True),
            tag=dict(required=False, default='latest'),
            state=dict(default='present',
                       choices=['absent', 'present', 'build']),
            docker_url=dict(default='unix://var/run/docker.sock'),
            timeout=dict(default=600, type='int'),
        )
    )

    if not HAS_DOCKERPY:
        module.fail_json('Missing docker-py python module on target machine')

    try:
        pull = DockerPull(module)
        state = module.params.get('state')
        failed = False
        image_id = None
        msg = ''

        # build image if not exists
        if state == 'present':
            images = pull.get_images()
            if len(images) == 0:
                image_id, msg = pull.pull()
                if image_id is None:
                    failed = True

        # remove image or images
        elif state == 'absent':
            pull.remove_images()

        module.exit_json(failed=failed, changed=pull.has_changed(), msg=msg,
                         image_id=image_id)

    except docker.client.APIError as e:
        module.exit_json(failed=True, changed=pull.has_changed(),
                         msg='Docker API error: %s' % e.explanation)

    except requests.exceptions.RequestException as e:
        module.exit_json(failed=True, changed=pull.has_changed(),
                         msg=repr(e))

# import module snippets
from ansible.module_utils.basic import *

main()
